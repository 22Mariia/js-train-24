console.log("Завдання: 7 ==============================");

// Створюємо функцію task7, яка використовує setInterval та проміси.
function task7() {
  let promise = new Promise((resolve, reject) => { 
    setInterval(() =>  (resolve, reject),1000)}
    
    )
  // Створюємо новий проміс.
  // Використовуємо функцію setInterval, щоб виконати функцію кожну секунду.
  let date = new Date();
  // Отримаємо поточну дату та час
  let seconds = date.getSeconds();
  // Отримуємо секунди з поточної дати
  console.log(`Поточні секунди: ${seconds}`);
  // Виводимо в консоль повідомлення `Поточні секунди: ${seconds}`
 
    
  promise.then((value) => {
    if(seconds%10 === 0){
      clearTimeout(() => resolve("Поточні секунди кратні 10!"))
    }
    if(seconds%3 === 0) {
      clearTimeout(() => reject("Поточні секунди кратні 3!")) 
    }
  console.log(`Проміс зарезолвився з значенням: ${value}`)})

.catch((error) => {
  console.error(`Проміс відхилився з помилкою: ${error}`);
})
.finally(() => {
  console.log("Проміс завершено");
});
  // Якщо поточні секунди кратні 10, очищуємо інтервал та резолвимо проміс з рядком "Поточні секунди кратні 10!".
  // Якщо поточні секунди кратні 3, очищуємо інтервал та відхиляємо проміс з рядком "Поточні секунди кратні 3!".
  // Використовуємо then для обробки зарезолвленого проміса, та виводимо в консоль `Проміс зарезолвився з значенням: ${value}` .
  // Якщо проміс відхилено, обробляємо помилку за допомогою catch, та виводимо в консоль `Проміс відхилився з помилкою: ${error}`.
  // Використовуємо finally для виконання дій після завершення проміса, незалежно від його статусу, та виводимо в консоль "Проміс завершено".
}

// Викликаємо функцію task7
task7();
